vocabulary V{
    type node  //defines the type node                                       
    edge(node,node)//defines the edge between two nodes
    edgeOnPath(node,node)//defines the edge which is included in the shortest path 
    begin:node //starting node 
    dest:node // destination node
    reaches(node,node) //defines a path from x to y in the edgeOnPath
}

theory T:V{
    //function called for begin and destination of the graph
    reaches(begin,dest).
    //x,y is in edgeOnPath if there is a direct edge between x and y
    // reaches called between x and y
    // if there exists an edge z between x and y then the reaches can be written
    !x y:edgeOnPath(x,y)=>edge(x,y).
    {       
        !x y:reaches(x,y) <- edgeOnPath(x,y) | edgeOnPath(y,x).
        !x y:reaches(x,y) <- ?z:reaches(x,z) & reaches(z,y).
    }
}

structure S:V{
    //This is the input for the given program
    //The number of nodes are 26
    //The edges are generated randomly between two nodes using a python script
    node= {'A';'B';'C';'D';'E';'F';'G';'H';'I';'J';'K';'L';'M';'N';'O';'P';'Q';'R';'S';'T';'U';'V';'W';'X';'Y';'Z'}
    edge={('I', 'F'); ('Z', 'I'); ('I', 'X'); ('V', 'E'); ('B', 'P'); ('Z', 'S'); ('O', 'R'); ('A', 'C'); ('Y', 'X'); ('K', 'J'); ('K', 'Z'); ('L', 'A'); ('U', 'G'); ('F', 'R'); ('O', 'K'); ('W', 'F'); ('Y', 'C'); ('Z', 'Y'); ('Q', 'O'); ('Q', 'B')}
     
    //begin and destination nodes
    begin=A
    dest=Y
}

term shortestPathLength:V{
    //shortestPathLength is an aggregate expression for counting the number of tuples in the edgeOnPath 
    #{x,y:edgeOnPath(x,y)}
}

procedure main(){
    /* Search a minimal model */
    //main() invokes the minimization of the model 
    shortestPath = minimize(T,S,shortestPathLength)[1]
    //[1] directs the solver to return at most one solution
    //if no shortest path exist return nill 
    //else print the solution 
    if(shortestPath==nill)
    then print("No Models exist\n")
    else print(shortestPath)
    end
}